<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; Interview Notes</title>
    <link>https://president810.github.io/Cpp-Interview-Notes/</link>
    <description>Recent content on C&#43;&#43; Interview Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Dec 2020 23:42:19 +0800</lastBuildDate>
    
	<atom:link href="https://president810.github.io/Cpp-Interview-Notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;</title>
      <link>https://president810.github.io/Cpp-Interview-Notes/interview/c&#43;&#43;/</link>
      <pubDate>Thu, 24 Dec 2020 23:42:19 +0800</pubDate>
      
      <guid>https://president810.github.io/Cpp-Interview-Notes/interview/c&#43;&#43;/</guid>
      <description>C++ 内存机制 基本数据类型 char(1字节），bool（1字节），short（2字节），int（4字节），long（8字节），float（4字节），double（8字节）
怎么判断float或者double为0 float32位中，有1位符号位，8位指数位，23位尾数为 double64位中，1位符号位，11位指数位，52位尾数位；
float的精度误差在1e-6；double精度误差在1e-15
要判断一个单精度浮点数：则是if( abs(f) &amp;lt;= 1e-6)； 要判断一个双精度浮点数：则是if( abs(f) &amp;lt;= 1e-15 )；
sizeof是编译时执行还是运行时执行 编译时，即sizeof返回大小为声明类型大小
内存泄露的定义，如何检测与避免？ 动态分配内存所开辟的空间，在使用完毕后未手动释放，导致一直占据该内存，即为内存泄漏。
造成内存泄漏的几种原因：
1）类的构造函数和析构函数中new和delete没有配套
2）在释放对象数组时没有使用delete[]，使用了delete
3）没有将基类的析构函数定义为虚函数，当基类指针指向子类对象时，如果基类的析构函数不是virtual，那么子类的析构函数将不会被调用，子类的资源没有正确释放，因此造成内存泄露
检测：
主要思路就是使每个new和delete匹配上
 在new和delete外面多包一层，并替换原有的new和delete运算符，将每次new和delete的信息输入到log中或者print出来，程序运行结束后检查是否每个new的对象都被delete 重载new和delete，将用new手动分配的内存地址用一个链表连起来，每次delete的时候删除对应地址的节点，最后遍历一遍这个链表，剩下的节点就是泄露的内存地址 Valgrind（没用过。。。） 智能指针  C++内存管理 BSS段（未初始化数据区）：通常用来存放程序中未初始化的全局变量和静态变量的一块内存区域。BSS段属于静态分配，程序结束后静态变量资源由系统自动释放。
DATA段：存放程序中已初始化的全局变量的一块内存区域。数据段也属于静态内存分配。数据段包含经过初始化的全局变量以及它们的值。DATA段又可分为读写（RW）区域和只读（RO）区域。RO段保存常量；RW段则是普通非常量全局变量，静态变量就在其中
TEXT段：存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域属于只读。在代码段中，也有可能包含一些只读的常数变量
可执行程序在运行时又多出两个区域：栈区和堆区。
栈区：由编译器自动释放，存放函数的参数值、局部变量等。每当一个函数被调用时，该函数的返回类型和一些调用的信息被存放到栈中。然后这个被调用的函数再为他的自动变量和临时变量在栈上分配空间。每调用一个函数一个新的栈就会被使用。栈区是从高地址位向低地址位增长的，是一块连续的内存区域，最大容量是由系统预先定义好的，申请的栈空间超过这个界限时会提示溢出，用户能从栈中获取的空间较小。
堆区：用于动态分配内存，位于BSS和栈中间的地址区域。由程序员申请分配和释放。堆是从低地址位向高地址位增长，采用链式存储结构。频繁的 malloc/free造成内存空间的不连续，产生碎片。当申请堆空间时库函数是按照一定的算法搜索可用的足够大的空间。因此堆的效率比栈要低的多。
给函数传入一个指针参数，可以用这个指针申请内存吗 不行，传入的指针实际上是一个副本，虽然函数中这个指针和函数外的指针指向的地址相同，但它们是两个指针；当用malloc分配内存时函数内指针指向的地址发生改变，但是却不会影响函数外原来指针指向的地址，当函数结束时函数内的临时参数指针副本会被销毁，导致这块内存无法被找到
正确的做法是传入指向这个指针的指针来改变这个指针的指向地址，或者让函数直接返回指向新地址的指针
指针 / 数组区别 （除了字符串情况之外）如果要在声明的同时进行初始化，指针需要用new的方式初始化，而数组要用{}的方式初始化
int main() { int *n1 = new int[5]; // 内存分配在堆上 // int *n2 = {1,2,3,4,5}; // 指针声明初始化只能用new  int n3[] = {1,2,3,4,5}; // 内存分配在栈上 // int n4[] = new int[5]; // 数组声明初始化只能用显式数组列表  int *n5 = n3; // 指针可以赋值初始化，让它指向一个数组 // int n6[] = n1; // 数组却只能显式声明数组列表是什么 } 字符串能不能修改 char str[] = &amp;#34;hello, world&amp;#34;; str[1] = &amp;#39;a&amp;#39;; 这个程序可以正常运行，因为这里的hello world是放在栈里面的而不是只读数据区，所以可以进行修改</description>
    </item>
    
    <item>
      <title>Operating System</title>
      <link>https://president810.github.io/Cpp-Interview-Notes/interview/operatingsystem/</link>
      <pubDate>Thu, 24 Dec 2020 23:41:42 +0800</pubDate>
      
      <guid>https://president810.github.io/Cpp-Interview-Notes/interview/operatingsystem/</guid>
      <description>操作系统 Linux 用户态到内核态的切换  系统调用  这是用户态进程主动要求切换到内核态的一种方式，**用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作。**比如前例中fork()实际上就是执行了一个创建新进程的系统调用。
用户程序通常调用库函数，由库函数再调用系统调用，因此有的库函数会使用户程序进入内核态（只要库函数中某处调用了系统调用），有的则不会。
 异常  当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。
 外围设备的中断  当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，
如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。
用户态和内核态区别 两者最大的区别就是特权级不同。用户态拥有最低的特权级，内核态拥有较高的特权级。运行在用户态的程序不能直接访问操作系统内核数据结构和程序。内核态和用户态之间的转换方式主要包括：系统调用，异常和中断。
为什么要分用户态和内核态 为了安全性。在cpu的一些指令中，有的指令如果用错，将会导致整个系统崩溃。 分了内核态和用户态后，当用户需要操作这些指令时候，内核为其提供了API，可 以通过系统调用陷入内核，让内核去执行这些操作。
系统调用 系统调用是操作系统提供给用户（应用程序）的一组接口，每个系统调用都有一个对应的系统调用函数来完成相应的工作。用户通过这个接口向操作系统申请服务，如访问硬件，管理进程等等。但是因为用户程序运行在用户空间，而系统调用运行在内核空间，因此用户程序不能直接调用系统调用函数，我们经常看到的比如fork、open、write 等等函数实际上并不是真正的系统调用函数，他们都只是c库，在这些函数里将执行一个软中断 swi 指令，产生一个软中断，使CPU 陷入内核态，接着在内核中进行一系列的判断，判断出是哪个系统调用，再转到真正的系统调用函数，完成相应的功能。
系统调用与普通函数库调用区别 函数库的API是相同的，系统调用的API取决于操作系统
函数库调用的是函数库里面的一段程序，系统调用调用的是内核的服务
函数库调用在用户态，系统调用在内核态
函数库调用不用上下文切换，系统调用需要切换到内核态
进程 &amp;amp; 线程 父子进程 创建进程：pid_t fork(void)
返回值：创建失败返回-1，创建成功返回0给创建的子进程，返回子进程号给父进程
子进程将父进程地址空间拷贝一份（出于内存管理原因可能一开始不会拷贝成两份），父子进程从fork的下一行开始执行
结束进程：exit()
等待子进程：pit_t wait(int *status_ptr) / pid_t waitpid(pid_t pid, int *status_ptr, int options)，等待直到子进程状态码可用，然后将子进程状态码拷贝到 *status_ptr
返回值：不成功时返回-1，子进程状态码可用时返回子进程号
执行程序：execve(const char *filename, const char *arg0, char *const env[]&amp;hellip;)
不会再创建新进程，pid不变，机器码，数据，堆，栈替换为新程序的数据
返回值：不成功返回-1，成功不返回值（代码已被替换）
僵尸进程，孤儿进程 僵尸进程：子进程退出但父进程没有wait获取其状态信息，子进程进程描述符仍保存在系统中；会占用进程号最终导致系统没有可用的进程号而不能产生新的进程；kill掉父进程后变为孤儿进程以解决问题
孤儿进程：父进程退出但子进程还在运行，孤儿进程会被init进程收养；init进程会wait孤儿进程故危害不大</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>https://president810.github.io/Cpp-Interview-Notes/interview/datastructure/</link>
      <pubDate>Thu, 24 Dec 2020 23:38:22 +0800</pubDate>
      
      <guid>https://president810.github.io/Cpp-Interview-Notes/interview/datastructure/</guid>
      <description>数据结构 哈希表 基本思想：首先在元素的关键字K和元素的位置P之间建立一个对应关系f，使得P=f(K),其中f成为哈希函数。创建哈希表时，把关键字K的元素直接存入地址为f(K)的单元；查找关键字K的元素时利用哈希函数计算出该元素的存储位置P=f(K). 当关键字集合很大时，关键字值不同的元素可能会映像到哈希表的同一地址上，即K1!=K2，但f(K1)=f(K2),这种现象称为hash冲突
开放定址法： 所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1) 用开放定址法解决冲突的做法是：当冲突发生时，使用某种探测技术在散列表中形成一个探测序列。沿此序列逐个单元地查找，直到找到给定的关键字，或者碰到一个开放的地址为止（插入时探查到开放的地址则将待插入的新结点存人该地址单元；查找时探测到开放的地址则表明表中无待查的关键字即查找失败）
链地址法： 链地址法的基本思想是：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表连接起来
排序    Algorithm Average time complexity Worst time complexity Space complexity Stable Place     Bubble sort O(n^2) O(n^2) O(1) True In-place   Selection sort O(n^2) O(n^2) O(1) False In-place   Insertion sort O(n^2) O(n^2) O(1) True In-place   Shell sort O(n^1.16) (Sedgewick) O(n^1.33) (Sedgewick) O(1) False In-place   Heap sort O(nlogn) O(nlogn) O(1) False In-place   Merge sort O(nlogn) O(nlogn) O(n) True Out-place   Quick sort O(nlogn) O(n^2) O(logn) False In-place   Bucket sort O(n+k) O(n^2) O(n+k) True Out-place   Counting sort O(n+k) O(n+k) O(k) True Out-place   Radix sort O(n*k) O(n*k) O(n+k) True Out-place    (1)冒泡排序</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://president810.github.io/Cpp-Interview-Notes/interview/database/</link>
      <pubDate>Thu, 24 Dec 2020 23:37:43 +0800</pubDate>
      
      <guid>https://president810.github.io/Cpp-Interview-Notes/interview/database/</guid>
      <description>数据库 关系型数据库 什么是关系型数据库 关系型数据库是依据关系模型来创建的数据库，由表的集合组成，关系模型可以为一对一、一对多、多对多
数据库范式 1NF：每个属性都不可再分
2NF：不存在非主属性对码的部分函数依赖（非主属性完全依赖于主关键字）
3NF：不存在非主属性对码的传递函数依赖
BCNF：主键有可能是由多个主属性组合成的复合主键，那么多个主属性之间不能有传递依赖
连接 自然连接（natural join） 自然连接是一种特殊的等值连接，他要求两个关系表中进行比较的必须是相同的属性列，无须添加连接条件，并且在结果中消除重复的属性列。
内连接（inner join） 内连接基本与自然连接相同，不同之处在于自然连接要求是同名属性列的比较，而内连接则不要求两属性列同名，可以用using或on来指定某两列字段相同的连接条件。
平常from &amp;hellip; where &amp;hellip; = &amp;hellip;虽然没有指明是inner join但实际上就是内连接
如果是join，默认就是inner join
左外连接（left outer join) 左外连接是在两表进行自然连接，只把左表要舍弃的保留在结果集中，右表对应的列上填null。
右外连接(rignt outer join) 右外连接是在两表进行自然连接，只把右表要舍弃的保留在结果集中，左表对应的列上填null。
全外连接(full join) 全外连接是在两表进行自然连接，只把左表和右表要舍弃的都保留在结果集中，相对应的列上填null。
联合查询 联合查询结果是将多个select语句的查询结果合并到一块
比如现在需要查询两个公司的所有员工的信息，这就需要从甲公司查询所有员工信息，再从乙公司查询所有的员工信息，然后将两次的查询结果进行合并。
语法格式如下:
select 语句1 union[union 选项] select 语句2 union|[union 选项] select 语句n 其中union选项有两个选项可选
 all：表示无论重复都输出 distinct: 去重(整个重复)（默认的）  应用场景
 将同一张表中不同的结果（需要对应多条查询语句来实现），合并到一起展示数据 最常见：在数据量大的情况下，会对表进行分表操作，需要对每张表进行部分数据统计，使用联合查询来将数据存放到一起显示  事务 数据库什么是事务？ 事务是由一系列对系统中数据进行访问与更新的操作所组成的一个程序执行逻辑单元。
事务有哪四个特性？分别表示什么含义？ A：原子性 事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出全部成功执行或者全部不执行。
C：一致性 事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。
I：隔离性 事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其他事务干扰。也就是说，不同的事务并发操纵相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</description>
    </item>
    
    <item>
      <title>Computer Network</title>
      <link>https://president810.github.io/Cpp-Interview-Notes/interview/computernetwork/</link>
      <pubDate>Thu, 24 Dec 2020 23:35:01 +0800</pubDate>
      
      <guid>https://president810.github.io/Cpp-Interview-Notes/interview/computernetwork/</guid>
      <description>计算机网络 OSI七层模型 协议，作用 物理层：建立、维护、断开物理连接
提供物理连接；实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么
链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能
建立管理节点间的链路；接受来自物理层的比特流形式的数据并封装成帧传送到上一层，将来自上层的数据帧拆装为比特流形式的数据发送给物理层；通过mac地址在网络内部找到host
网络层：进行逻辑地址寻址，实现不同网络之间的路径选择
通过路由选择算法为报文或分组通过通信子网选择最适当的路径；链路层数据帧在网络层被转换为数据包，在不同网络中进行传输；在不同网络间通信时通过唯一的ip地址（逻辑地址）识别设备，通过路由器连接不同的网络并计算出传送路径
传输层：建立，管理和维护端到端的连接
定义了传输数据的协议及端口号（TCP传输效率低可靠性高，发消息等允许延迟不允许丢包，UDP效率高可靠性低，视频聊天等允许丢包不允许延迟），将从下层接受到的数据进行分段和传输，到达目的地址之后再重组，同时进行流量控制，根据接收方接收数据的快慢程度，规定适当的发送速率，解决传输效率及能力的问题
会话层，表示层不提了
应用层：网络服务与最终用户的一个接口，规定应用程序如何进行通信
直接向用户的应用程序提供网络服务，进行文件传输，文件管理，电子邮件的信息处理
IP IP Packet Version：版本号
Header length：头长度
Type of service：服务类型
Datagram length：数据报长度
Identifier, flags, fragmentation offset：用来分片（IP fragmentation），链路层有最大传输限制（MTU），通过分片保证IP包可以分成符合MTU的小片从而在不同局域网之间传输
Time-to-live：确保ip packet不会在网络中一直被传下去
Protocol：传输层用的啥协议
Header checksum：校验用的
Source and destination IP addresses：两边的ip地址
Options：一般不用
ARP协议 ARP协议是用来在局域网内找IP对应的MAC的
源主机先在自己的ARP缓冲区中寻找映射，如果有（直接填充于以太网帧中），如果没有，通过路由广播向局域网内每一台主机进行请求，这时一些联网的主机就会收到这个请求，并将这个请求传回网络层，对比IP地址，检验是否可以接受，如果不行，则直接丢失这个信息，如果可以那么回复ARP请求，并且将源主机的MAC地址加入到目的ARP缓冲区中，形成映射，源主机接受到请求后，将目的的MAC地址加入到ARP缓冲区，也形成映射，并将mac地址传输至连接层。此时转化完成
TCP/UDP TCP，UDP区别，应用场景 TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接（三次握手/四次挥手），丢包重发，分包顺序乱了会进行顺序控制；提供拥塞控制 UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务，传输数据之前源端和终端不建立连接。并且它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。没有拥塞控制，（网络出现拥塞不会使源主机的发送速率降低），丢包不重发。包的到达顺序乱掉也不纠正。
1、TCP面向连接，需要先建立连接；UDP是无连接的，即发送数据之前不需要建立连接
2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，即不保证可靠交付
3、TCP面向字节流，当应用程序传送的数据块太长会把它划分短一些再传送，如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去；UDP是面向报文的，应用层交给UDP多长的报文，UDP就照样发送
4、每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信
5、TCP首部开销20字节；UDP的首部开销小只有8个字节
TCP用于在传输层有必要实现可靠传输的情况：SMTP，SSH，HTTP，FTP，
UDP用于那些对高速传输和实时性有较高要求的通信或广播通信：DNS，TFTP
TCP segment Sequence &amp;amp; Acknowledgment：确保可靠传输
Receive window：流量控制
Header length：TCP头部长度（options一般为空，所以长度一般为20bytes）
Option field：用于协商MSS
ACK：Acknowledgment是否有效
RST &amp;amp; SYN &amp;amp; FIN：三次握手四次挥手</description>
    </item>
    
  </channel>
</rss>